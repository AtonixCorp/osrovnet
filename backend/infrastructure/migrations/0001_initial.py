# Generated by Django 5.2.6 on 2025-09-19 08:01

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BackupJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('backup_type', models.CharField(choices=[('database', 'Database Backup'), ('files', 'File System Backup'), ('configuration', 'Configuration Backup'), ('logs', 'Log Files Backup'), ('full_system', 'Full System Backup')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('source_path', models.TextField()),
                ('destination_path', models.TextField()),
                ('frequency', models.CharField(choices=[('hourly', 'Hourly'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('manual', 'Manual')], max_length=20)),
                ('schedule_time', models.TimeField(blank=True, null=True)),
                ('retention_days', models.IntegerField(default=30)),
                ('is_enabled', models.BooleanField(default=True)),
                ('compression_enabled', models.BooleanField(default=True)),
                ('encryption_enabled', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_run', models.DateTimeField(blank=True, null=True)),
                ('next_run', models.DateTimeField(blank=True, null=True)),
                ('configuration', models.JSONField(default=dict)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'backup_jobs',
            },
        ),
        migrations.CreateModel(
            name='BackupExecution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('started', 'Started'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='started', max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('backup_size', models.BigIntegerField(blank=True, null=True)),
                ('files_count', models.IntegerField(blank=True, null=True)),
                ('backup_path', models.TextField(blank=True)),
                ('error_message', models.TextField(blank=True)),
                ('logs', models.TextField(blank=True)),
                ('checksum', models.CharField(blank=True, max_length=64)),
                ('metadata', models.JSONField(default=dict)),
                ('backup_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='infrastructure.backupjob')),
            ],
            options={
                'db_table': 'backup_executions',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='DisasterRecoveryPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('plan_type', models.CharField(choices=[('data_recovery', 'Data Recovery'), ('system_recovery', 'System Recovery'), ('network_recovery', 'Network Recovery'), ('application_recovery', 'Application Recovery'), ('full_site_recovery', 'Full Site Recovery')], max_length=20)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('approved', 'Approved'), ('active', 'Active'), ('outdated', 'Outdated'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('priority', models.IntegerField(default=1)),
                ('rto', models.IntegerField(help_text='Recovery Time Objective (minutes)')),
                ('rpo', models.IntegerField(help_text='Recovery Point Objective (minutes)')),
                ('procedures', models.JSONField(default=list)),
                ('contacts', models.JSONField(default=list)),
                ('resources_required', models.JSONField(default=list)),
                ('dependencies', models.JSONField(default=list)),
                ('testing_schedule', models.CharField(blank=True, max_length=50)),
                ('last_tested', models.DateTimeField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_dr_plans', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'disaster_recovery_plans',
            },
        ),
        migrations.CreateModel(
            name='DisasterRecoveryTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_type', models.CharField(choices=[('tabletop', 'Tabletop Exercise'), ('walkthrough', 'Walkthrough Test'), ('simulation', 'Simulation Test'), ('parallel', 'Parallel Test'), ('full_interruption', 'Full Interruption Test')], max_length=20)),
                ('test_name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='planned', max_length=20)),
                ('scheduled_date', models.DateTimeField()),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('objectives', models.JSONField(default=list)),
                ('results', models.TextField(blank=True)),
                ('issues_found', models.JSONField(default=list)),
                ('recommendations', models.TextField(blank=True)),
                ('dr_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='infrastructure.disasterrecoveryplan')),
                ('participants', models.ManyToManyField(related_name='dr_tests', to=settings.AUTH_USER_MODEL)),
                ('test_lead', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='led_dr_tests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'disaster_recovery_tests',
                'ordering': ['-scheduled_date'],
            },
        ),
        migrations.CreateModel(
            name='InfrastructureComponent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('component_type', models.CharField(choices=[('server', 'Server'), ('database', 'Database'), ('web_server', 'Web Server'), ('load_balancer', 'Load Balancer'), ('cache', 'Cache Server'), ('queue', 'Message Queue'), ('storage', 'Storage System'), ('network', 'Network Device'), ('application', 'Application Service'), ('container', 'Container'), ('vm', 'Virtual Machine')], max_length=20)),
                ('hostname', models.CharField(blank=True, max_length=255)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('port', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('healthy', 'Healthy'), ('warning', 'Warning'), ('critical', 'Critical'), ('down', 'Down'), ('maintenance', 'Maintenance')], default='healthy', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('is_critical', models.BooleanField(default=False)),
                ('is_monitored', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_check', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict)),
            ],
            options={
                'db_table': 'infrastructure_components',
                'indexes': [models.Index(fields=['status', 'is_monitored'], name='infrastruct_status_9120eb_idx'), models.Index(fields=['component_type', 'status'], name='infrastruct_compone_865586_idx')],
            },
        ),
        migrations.CreateModel(
            name='HealthMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('cpu_usage', 'CPU Usage'), ('memory_usage', 'Memory Usage'), ('disk_usage', 'Disk Usage'), ('network_io', 'Network I/O'), ('response_time', 'Response Time'), ('throughput', 'Throughput'), ('error_rate', 'Error Rate'), ('uptime', 'Uptime'), ('temperature', 'Temperature'), ('power_usage', 'Power Usage'), ('custom', 'Custom Metric')], max_length=20)),
                ('metric_name', models.CharField(max_length=100)),
                ('value', models.FloatField()),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('threshold_warning', models.FloatField(blank=True, null=True)),
                ('threshold_critical', models.FloatField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(default=dict)),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='infrastructure.infrastructurecomponent')),
            ],
            options={
                'db_table': 'health_metrics',
            },
        ),
        migrations.CreateModel(
            name='MaintenanceWindow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('maintenance_type', models.CharField(choices=[('security_updates', 'Security Updates'), ('system_updates', 'System Updates'), ('hardware_maintenance', 'Hardware Maintenance'), ('configuration_changes', 'Configuration Changes'), ('backup_testing', 'Backup Testing'), ('dr_testing', 'DR Testing'), ('performance_tuning', 'Performance Tuning')], max_length=25)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('failed', 'Failed')], default='scheduled', max_length=20)),
                ('scheduled_start', models.DateTimeField()),
                ('scheduled_end', models.DateTimeField()),
                ('actual_start', models.DateTimeField(blank=True, null=True)),
                ('actual_end', models.DateTimeField(blank=True, null=True)),
                ('impact_description', models.TextField()),
                ('rollback_plan', models.TextField(blank=True)),
                ('notification_sent', models.BooleanField(default=False)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_maintenance', to=settings.AUTH_USER_MODEL)),
                ('assigned_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('components', models.ManyToManyField(related_name='maintenance_windows', to='infrastructure.infrastructurecomponent')),
            ],
            options={
                'db_table': 'maintenance_windows',
                'ordering': ['scheduled_start'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('system', 'System Performance'), ('application', 'Application Performance'), ('database', 'Database Performance'), ('network', 'Network Performance'), ('user_experience', 'User Experience')], max_length=20)),
                ('metric_name', models.CharField(max_length=100)),
                ('value', models.FloatField()),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('tags', models.JSONField(default=dict)),
                ('metadata', models.JSONField(default=dict)),
                ('component', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='infrastructure.infrastructurecomponent')),
            ],
            options={
                'db_table': 'performance_metrics',
            },
        ),
        migrations.CreateModel(
            name='SystemAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('performance', 'Performance'), ('availability', 'Availability'), ('capacity', 'Capacity'), ('security', 'Security'), ('configuration', 'Configuration'), ('backup', 'Backup'), ('recovery', 'Recovery')], max_length=20)),
                ('severity', models.CharField(choices=[('critical', 'Critical'), ('high', 'High'), ('medium', 'Medium'), ('low', 'Low'), ('info', 'Informational')], max_length=10)),
                ('status', models.CharField(choices=[('open', 'Open'), ('acknowledged', 'Acknowledged'), ('investigating', 'Investigating'), ('resolved', 'Resolved'), ('suppressed', 'Suppressed')], default='open', max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='infrastructure.infrastructurecomponent')),
                ('metric', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='infrastructure.healthmetric')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_alerts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'system_alerts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='healthmetric',
            index=models.Index(fields=['component', 'timestamp'], name='health_metr_compone_110be4_idx'),
        ),
        migrations.AddIndex(
            model_name='healthmetric',
            index=models.Index(fields=['metric_type', 'timestamp'], name='health_metr_metric__efbbc9_idx'),
        ),
        migrations.AddIndex(
            model_name='performancemetric',
            index=models.Index(fields=['category', 'timestamp'], name='performance_categor_50122f_idx'),
        ),
        migrations.AddIndex(
            model_name='performancemetric',
            index=models.Index(fields=['metric_name', 'timestamp'], name='performance_metric__2bab3d_idx'),
        ),
    ]
