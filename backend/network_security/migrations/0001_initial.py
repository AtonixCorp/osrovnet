# Generated by Django 5.2.6 on 2025-09-19 07:02

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DiscoveredHost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('hostname', models.CharField(blank=True, max_length=255)),
                ('mac_address', models.CharField(blank=True, max_length=17)),
                ('state', models.CharField(choices=[('up', 'Up'), ('down', 'Down'), ('unknown', 'Unknown'), ('filtered', 'Filtered')], default='unknown', max_length=20)),
                ('os_detection', models.JSONField(blank=True, default=dict)),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('response_time', models.FloatField(blank=True, help_text='Response time in milliseconds', null=True)),
            ],
            options={
                'db_table': 'discovered_hosts',
                'ordering': ['ip_address'],
            },
        ),
        migrations.CreateModel(
            name='DiscoveredPort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('port_number', models.IntegerField()),
                ('protocol', models.CharField(choices=[('tcp', 'TCP'), ('udp', 'UDP')], default='tcp', max_length=3)),
                ('state', models.CharField(choices=[('open', 'Open'), ('closed', 'Closed'), ('filtered', 'Filtered'), ('unfiltered', 'Unfiltered'), ('open|filtered', 'Open|Filtered'), ('closed|filtered', 'Closed|Filtered')], default='closed', max_length=20)),
                ('service_name', models.CharField(blank=True, max_length=255)),
                ('service_version', models.CharField(blank=True, max_length=255)),
                ('service_info', models.JSONField(blank=True, default=dict)),
                ('banner', models.TextField(blank=True)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ports', to='network_security.discoveredhost')),
            ],
            options={
                'db_table': 'discovered_ports',
                'ordering': ['port_number'],
                'unique_together': {('host', 'port_number', 'protocol')},
            },
        ),
        migrations.CreateModel(
            name='NetworkScan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('hosts_discovered', models.IntegerField(default=0)),
                ('ports_scanned', models.IntegerField(default=0)),
                ('vulnerabilities_found', models.IntegerField(default=0)),
                ('scan_output', models.JSONField(blank=True, default=dict)),
                ('error_message', models.TextField(blank=True)),
                ('initiated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'network_scans',
                'ordering': ['-started_at'],
            },
        ),
        migrations.AddField(
            model_name='discoveredhost',
            name='scan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hosts', to='network_security.networkscan'),
        ),
        migrations.CreateModel(
            name='NetworkTarget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Target name or description', max_length=255)),
                ('target', models.CharField(help_text='IP address, range, or hostname', max_length=255)),
                ('scan_type', models.CharField(choices=[('ping', 'Ping Sweep'), ('tcp', 'TCP Scan'), ('udp', 'UDP Scan'), ('syn', 'SYN Scan'), ('comprehensive', 'Comprehensive Scan')], default='tcp', max_length=20)),
                ('ports', models.TextField(default='1-1000', help_text='Port range (e.g., 1-1000, 80,443,22)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'network_targets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='networkscan',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scans', to='network_security.networktarget'),
        ),
        migrations.CreateModel(
            name='NetworkTraffic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('source_ip', models.GenericIPAddressField()),
                ('destination_ip', models.GenericIPAddressField()),
                ('source_port', models.IntegerField()),
                ('destination_port', models.IntegerField()),
                ('protocol', models.CharField(max_length=10)),
                ('packet_size', models.IntegerField()),
                ('flags', models.CharField(blank=True, max_length=50)),
                ('payload_snippet', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'db_table': 'network_traffic',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['timestamp'], name='network_tra_timesta_27a714_idx'), models.Index(fields=['source_ip'], name='network_tra_source__60b208_idx'), models.Index(fields=['destination_ip'], name='network_tra_destina_47afb4_idx'), models.Index(fields=['protocol'], name='network_tra_protoco_51b349_idx')],
            },
        ),
        migrations.CreateModel(
            name='Vulnerability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cve_id', models.CharField(blank=True, max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('severity', models.CharField(choices=[('info', 'Informational'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='info', max_length=10)),
                ('cvss_score', models.FloatField(blank=True, null=True)),
                ('solution', models.TextField(blank=True)),
                ('references', models.JSONField(blank=True, default=list)),
                ('discovered_at', models.DateTimeField(auto_now_add=True)),
                ('port', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vulnerabilities', to='network_security.discoveredport')),
            ],
            options={
                'db_table': 'vulnerabilities',
                'ordering': ['-cvss_score', '-discovered_at'],
            },
        ),
        migrations.CreateModel(
            name='NetworkAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('intrusion', 'Intrusion Attempt'), ('port_scan', 'Port Scan'), ('ddos', 'DDoS Attack'), ('malware', 'Malware Detection'), ('anomaly', 'Traffic Anomaly'), ('policy_violation', 'Policy Violation')], max_length=20)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=10)),
                ('status', models.CharField(choices=[('new', 'New'), ('investigating', 'Investigating'), ('resolved', 'Resolved'), ('false_positive', 'False Positive')], default='new', max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('source_ip', models.GenericIPAddressField()),
                ('destination_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('related_scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='network_security.networkscan')),
            ],
            options={
                'db_table': 'network_alerts',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['severity', 'status'], name='network_ale_severit_8b3912_idx'), models.Index(fields=['alert_type'], name='network_ale_alert_t_00ce12_idx'), models.Index(fields=['created_at'], name='network_ale_created_fbc16d_idx')],
            },
        ),
        migrations.AlterUniqueTogether(
            name='discoveredhost',
            unique_together={('scan', 'ip_address')},
        ),
    ]
