apiVersion: apps/v1
kind: Deployment
metadata:
  name: osrovnet-backend
  namespace: osrovnet
  labels:
    app.kubernetes.io/name: osrovnet-backend
    app.kubernetes.io/component: api-server
    app.kubernetes.io/part-of: osrovnet
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: osrovnet-backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: osrovnet-backend
        app.kubernetes.io/component: api-server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      imagePullSecrets:
      - name: osrovnet-registry
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: backend
        image: registry.atonixcorp.com/osrovnet/backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              name: osrovnet-config
              key: DEBUG
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: osrovnet-secrets
              key: SECRET_KEY
        - name: DATABASE_URL
          value: "postgresql://osrovnet_user:$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)"
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: osrovnet-secrets
              key: DATABASE_PASSWORD
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: osrovnet-config
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: osrovnet-config
              key: DATABASE_PORT
        - name: DATABASE_NAME
          valueFrom:
            configMapKeyRef:
              name: osrovnet-config
              key: DATABASE_NAME
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)/$(REDIS_DB)"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: osrovnet-secrets
              key: REDIS_PASSWORD
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: osrovnet-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: osrovnet-config
              key: REDIS_PORT
        - name: REDIS_DB
          valueFrom:
            configMapKeyRef:
              name: osrovnet-config
              key: REDIS_DB
        - name: ALLOWED_HOSTS
          valueFrom:
            configMapKeyRef:
              name: osrovnet-config
              key: ALLOWED_HOSTS
        - name: SHODAN_API_KEY
          valueFrom:
            secretKeyRef:
              name: osrovnet-secrets
              key: SHODAN_API_KEY
        - name: MAXMIND_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: osrovnet-secrets
              key: MAXMIND_LICENSE_KEY
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: data
          mountPath: /app/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health/
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready/
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 12
      volumes:
      - name: logs
        persistentVolumeClaim:
          claimName: osrovnet-logs-pvc
      - name: data
        persistentVolumeClaim:
          claimName: osrovnet-data-pvc
      initContainers:
      - name: migrate
        image: registry.atonixcorp.com/osrovnet/backend:latest
        command: ['python', 'manage.py', 'migrate']
        env:
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: osrovnet-secrets
              key: SECRET_KEY
        - name: DATABASE_URL
          value: "postgresql://osrovnet_user:$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)"
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: osrovnet-secrets
              key: DATABASE_PASSWORD
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: osrovnet-config
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: osrovnet-config
              key: DATABASE_PORT
        - name: DATABASE_NAME
          valueFrom:
            configMapKeyRef:
              name: osrovnet-config
              key: DATABASE_NAME

---
apiVersion: v1
kind: Service
metadata:
  name: osrovnet-backend-service
  namespace: osrovnet
  labels:
    app.kubernetes.io/name: osrovnet-backend
    app.kubernetes.io/component: api-server
spec:
  selector:
    app.kubernetes.io/name: osrovnet-backend
  ports:
  - port: 8000
    targetPort: 8000
    name: http
  type: ClusterIP