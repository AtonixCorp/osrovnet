apiVersion: v1
kind: Pod
metadata:
  name: security-scanner
  namespace: osrovnet
  labels:
    app: security-scanner
    security-scan: "true"
spec:
  restartPolicy: Never
  serviceAccountName: osrovnet-readonly
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000
  containers:
  - name: trivy-scanner
    image: aquasec/trivy:latest
    command: ["sh", "-c"]
    args:
    - |
      echo "Starting security scan..."
      trivy image --format json --output /tmp/scan-results.json registry.atonixcorp.com/osrovnet/backend:latest
      trivy image --format json --output /tmp/frontend-scan-results.json registry.atonixcorp.com/osrovnet/frontend:latest
      echo "Security scan completed"
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 1Gi
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
        - ALL
    volumeMounts:
    - name: scan-results
      mountPath: /tmp
  volumes:
  - name: scan-results
    emptyDir: {}

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: security-scan-cronjob
  namespace: osrovnet
  labels:
    app: security-scanner
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: security-scanner
        spec:
          restartPolicy: OnFailure
          serviceAccountName: osrovnet-readonly
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            fsGroup: 1000
          containers:
          - name: trivy-scanner
            image: aquasec/trivy:latest
            command: ["sh", "-c"]
            args:
            - |
              echo "Starting scheduled security scan..."
              trivy image --format json --output /tmp/backend-scan.json registry.atonixcorp.com/osrovnet/backend:latest
              trivy image --format json --output /tmp/frontend-scan.json registry.atonixcorp.com/osrovnet/frontend:latest
              
              # Check for critical vulnerabilities
              critical_backend=$(cat /tmp/backend-scan.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length')
              critical_frontend=$(cat /tmp/frontend-scan.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length')
              
              if [ "$critical_backend" -gt 0 ] || [ "$critical_frontend" -gt 0 ]; then
                echo "CRITICAL vulnerabilities found!"
                echo "Backend critical: $critical_backend"
                echo "Frontend critical: $critical_frontend"
                # Send alert (implement webhook or notification mechanism)
              fi
              
              echo "Security scan completed"
            resources:
              requests:
                cpu: 100m
                memory: 256Mi
              limits:
                cpu: 500m
                memory: 1Gi
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                - ALL
            volumeMounts:
            - name: scan-results
              mountPath: /tmp
          volumes:
          - name: scan-results
            emptyDir: {}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-policies
  namespace: osrovnet
  labels:
    app.kubernetes.io/name: osrovnet
    app.kubernetes.io/component: security
data:
  pod-security-policy.yaml: |
    apiVersion: policy/v1beta1
    kind: PodSecurityPolicy
    metadata:
      name: osrovnet-restricted
    spec:
      privileged: false
      allowPrivilegeEscalation: false
      requiredDropCapabilities:
        - ALL
      volumes:
        - 'configMap'
        - 'emptyDir'
        - 'projected'
        - 'secret'
        - 'downwardAPI'
        - 'persistentVolumeClaim'
      runAsUser:
        rule: 'MustRunAsNonRoot'
      seLinux:
        rule: 'RunAsAny'
      fsGroup:
        rule: 'RunAsAny'
      readOnlyRootFilesystem: true
      
  security-context-constraints.yaml: |
    allowHostDirVolumePlugin: false
    allowHostIPC: false
    allowHostNetwork: false
    allowHostPID: false
    allowHostPorts: false
    allowPrivilegedContainer: false
    allowedCapabilities: []
    defaultAddCapabilities: []
    fsGroup:
      type: RunAsAny
    readOnlyRootFilesystem: true
    requiredDropCapabilities:
    - ALL
    runAsUser:
      type: MustRunAsNonRoot
    seLinuxContext:
      type: RunAsAny

---
apiVersion: v1
kind: Secret
metadata:
  name: security-certificates
  namespace: osrovnet
  labels:
    app.kubernetes.io/name: osrovnet
    app.kubernetes.io/component: security
type: Opaque
data:
  # Certificate Authority for internal communications
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...
  ca.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t...
  
  # Server certificate for internal TLS
  server.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...
  server.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t...
  
  # Client certificate for mutual TLS
  client.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...
  client.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t...